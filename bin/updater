#!/usr/bin/env python
# Copyright (c) 2013 Oscar Campos <oscar.campos@member.fsf.org>
# See LICENSE for more details

import sys
sys.path.insert(0, '../../')    # mamba local library always

from twisted.python import log
from twisted.python.usage import Options, UsageError

from mamba.deployment.fabric_deployer import FabricDeployer


class UpdaterOptions(Options):
    """Options for Updater Script
    """

    optFlags = [
        ['release-candidate', None, 'This is a release candidate'],
        ['bugfix', None, 'This is a bugfix so only micro version is changed'],
        ['minor', None, 'This is a minor release'],
        ['major', None, 'This is a major release'],
        ['no-distribute', 'n', 'No distribute source package for PyPI'],
        ['only-distribute', 'd', 'Only distribute package dont update git'],
        ['pretend', 'p', 'Dont really do any change, just pretend']
    ]

    def postOptions(self):
        """Post options processing
        """

        if not self['major'] and not self['minor'] and not self['bugfix']:
            if not self['release-candidate']:
                raise UsageError('You must provide an option')

        msg = 'Only one of major, minor or bugfix can be used at once'
        if self['major']:
            if self['minor'] or self['bugfix']:
                raise UsageError(msg)

        if self['minor']:
            if self['major'] or self['bugfix']:
                raise UsageError(msg)

        if self['bugfix']:
            if self['major'] or self['minor']:
                raise UsageError(msg)

        with open('settings.py', 'w+') as settings:
            data = [
                '# this is an autogenerated file, do not edit',
                'is_bugfix = {bugfix}'.format(bugfix=self['bugfix']),
                'is_major = {major}'.format(major=self['major']),
                'is_minor = {minor}'.format(minor=self['minor']),
                'is_release_candidate = {release_candidate}'.format(
                    release_candidate=self['release-candidate']),
                'pretend = {pretend}'.format(pretend=self['pretend']),
                'no_distribute = {no_distribute}'.format(
                    no_distribute=self['no-distribute']
                ),
                'only_distribute = {only_distribute}'.format(
                    only_distribute=self['only-distribute']
                )
            ]

            settings.write('\n'.join(data))


class UpdaterWorker(FabricDeployer):
    """Perform automated update tasks for Mamba releases
    """

    def __init__(self, options):
        super(UpdaterWorker, self).__init__()


class UpdaterScript(object):
    """Script to update and release Mamba versions
    """

    def main(self, args):
        """Given a  list of options update and release Mamba
        """
        options = UpdaterOptions()

        try:
            options.parseOptions(args)
            log.startLogging(open('./updater.log', 'w'))
        except UsageError as error:
            print(options)
            raise SystemExit(error)

        UpdaterWorker(options).deploy('../release/update_version.dc')


if __name__ == '__main__':
    UpdaterScript().main(sys.argv[1:])
